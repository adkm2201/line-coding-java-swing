/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.List;

/**
 *
 * @author adkm2
 */
public abstract class Waveform extends javax.swing.JPanel {
    
    public List<Boolean> bits;
    public int amplitude = 50;
    // width in pixels allocated per bit; increase to spread bits out
    protected int pixelsPerBit = 40;
    /**
     * Creates new form WaveformAbstract
     */
    public Waveform(List<Boolean> bits) {
        initComponents();
        // Preferred width grows with number of bits so the panel can be scrolled horizontally
        int prefWidth = 800;
        if (bits != null) {
            prefWidth = Math.max(prefWidth, bits.size() * pixelsPerBit);
        }
        setPreferredSize(new Dimension(prefWidth, 300));
        setBackground(Color.WHITE);
        this.bits = bits;      

    }
    

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        // If there are no bits to display, nothing to draw
        if (bits == null || bits.isEmpty()) {
            g2d.setColor(Color.BLACK);
            g2d.drawString("No signal data.", 10, 20);
            return;
        }

        drawGrid(g2d);
        drawBitLabels(g2d);
        drawSignal(g2d);
    }
  
    public abstract void drawGrid(Graphics2D g2d);
    
    
    private void drawBitLabels(Graphics2D g2d) {
        g2d.setColor(Color.BLACK);

        double bitWidth = getBitWidth();

        g2d.setFont(new Font("Monospaced", Font.BOLD, 12));
        FontMetrics fm = g2d.getFontMetrics();
        
        
        for (int i = 0; i < bits.size(); i++) {
            String bitLabel = String.valueOf((bits.get(i)) ? "1" : "0");
            int x = (int) (i * bitWidth + bitWidth / 2 - fm.stringWidth(bitLabel) / 2);
            int y = 20;
            g2d.drawString(bitLabel, x, y);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public abstract void drawSignal(Graphics2D g2d);
    
    protected int getCenterY() {
        return getHeight() / 2;
    }
    
    protected double getBitWidth() {
        return (double) pixelsPerBit;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
