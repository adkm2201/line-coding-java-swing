/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.modulation;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.Point2D;
import java.util.List;
import view.Waveform;
/**
 *
 * @author adkm2
 */
public class FrequencyModulation extends Waveform {

    private double lowFreq = 1.0;
    private double highFreq = 2.0;
    private int samplesPerBit = 50;
    
    /**
     * Creates new form PhaseModulation
     */
    public FrequencyModulation(List<Boolean> bits) {
        super(bits);
        initComponents();
    }

    @Override
    public void drawGrid(Graphics2D g2d) {
        int height = getHeight();
        int centerY = height / 2;
        int totalWidth = (bits != null) ? bits.size() * pixelsPerBit : getWidth();
        
        g2d.setColor(Color.DARK_GRAY);
        g2d.setStroke(new BasicStroke(2.5f));
        g2d.drawLine(0, centerY, totalWidth, centerY);
        
        g2d.setColor(Color.LIGHT_GRAY);
        g2d.setStroke(new BasicStroke(0.5f));
        g2d.drawLine(0, centerY - amplitude, totalWidth, centerY - amplitude); // +max
        g2d.drawLine(0, centerY + amplitude, totalWidth, centerY + amplitude); // -max

        for (int i = 0; i <= (bits != null ? bits.size() : 0); i++) {
            int x = i * pixelsPerBit;
            g2d.drawLine(x, 0, x, height);
        }
    }

    @Override
    public void drawSignal(Graphics2D g2d) {
        if (bits == null || bits.isEmpty()) return;
        
        g2d.setColor(Color.BLUE);
        g2d.setStroke(new BasicStroke(2f));
        
        int centerY = getCenterY();
        double bitWidth = getBitWidth();
        double sampleWidth = bitWidth / samplesPerBit;
        
        for (int bitIndex = 0; bitIndex < bits.size(); bitIndex++) {
            boolean bit = bits.get(bitIndex);
            double frequency = bit ? highFreq : lowFreq;
            
            Point2D.Double prevPoint = null;
            
            for (int sample = 0; sample < samplesPerBit; sample++) {
                double x = bitIndex * bitWidth + sample * sampleWidth;
                double normalizedSample = (double) (sample) / (samplesPerBit - 1);
                double phase = 2 * Math.PI * frequency * normalizedSample;
                double y = centerY - amplitude * Math.sin(phase);
                
                Point2D.Double currentPoint = new Point2D.Double(x, y);
                
                if (prevPoint != null) {
                    g2d.drawLine((int)prevPoint.x, (int)prevPoint.y, 
                                (int)currentPoint.x, (int)currentPoint.y);
                }
                prevPoint = currentPoint;
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
